
▩ 예제86. 지역변수와 전역변수 이해하기(global)




변수는 자신이 생성된 범위(코드블럭) 안에서만 유효합니다.
함수 안에서 만든 변수는 함수 안에서 살아 있다가 함수 코드의 실행이 종료되면
그 생명을 다한다.  이것을 '지역변수' 라고 합니다.

예:  스타벅스 매장내에서 사용하는 머그컵

이와는 반대로 함수 외부에서 만든 변수는 프로그램이 살아있는 동안에
함께 살아 있다가 프로그램이 종료되면 같이 소멸이 됩니다.
이렇게 프로그램 전체를 유효범위로 가지는 변수를 '전역변수' 라고 합니다.

예:  텀블러

예제. 전역변수와 지역변수의 사용예





예제. 전역변수의 사용예

pi = 3.1415926




※ 설명: 전역변수가 필요한 이유는 원주율 처럼 어느 함수에서 사용하든 절대로 
           일관된 데이터를 사용해야할 때 필요합니다.



위와 같이 pi를 지역변수로 사용하게 되면 미세한 계산 차이가 발생하게 됩니다. 

■ 전역변수가 필요한 경우 ?  

전역변수는 무분별하게 사용하면 코드의 예측 가능성을 낮추고 유지보수를 어렵게 만들 수 있지만, 
특정 상황에서는 필요하다. 다음과 같은 경우 전역변수를 사용하는 것이 적절하다.

---

■  전역변수가 필요한 이유

1. 프로그램 전체에서 공유해야 하는 값이 있을 때  
   - 설정 값, 환경 변수, 상태 값 등 프로그램 전반에서 참조해야 하는 값은 전역변수로 선언하면 편리하다.  

2. 함수 간 상태를 유지해야 할 때  
   - 여러 함수에서 동일한 데이터를 수정하거나 누적해야 하는 경우 전역변수를 사용하면 간결한 코드 작성이 가능하다.  

3. 객체나 데이터가 지속적으로 사용될 필요가 있을 때  
   - 로그, 캐시, 데이터베이스 연결 같은 리소스를 관리할 때 전역변수를 사용하면 효율적이다.  

---

■  전역변수의 적절한 사용 예제

 예제 1: 프로그램 전체에서 공유해야 하는 설정 값 사용
# 전역변수 없이 개별 설정을 전달하는 경우 (불편한 방식)

def connect_db(host, port, user, password):
    print(f"데이터베이스에 연결: {host}:{port}, 사용자: {user}")

connect_db("localhost", 3306, "admin", "password123")
connect_db("localhost", 3306, "admin", "password123")  # 매번 같은 값을 전달해야 함


# 전역변수를 사용하여 개선한 경우

# 전역 설정 변수
DB_CONFIG = {
    "host": "localhost",
    "port": 3306,
    "user": "admin",
    "password": "password123"
}

def connect_db():
    print(f"데이터베이스에 연결: {DB_CONFIG['host']}:{DB_CONFIG['port']}, 사용자: {DB_CONFIG['user']}")

connect_db()
connect_db()  # 전역 설정을 사용하므로 코드가 간결해짐

✅ 설정 값이 프로그램 전체에서 일관되게 유지될 필요가 있을 때 전역변수를 사용하면 효율적이다.

---

 예제 2: 함수 간 상태를 유지해야 할 때 (전역 카운터)
# 전역변수 없이 상태를 매번 전달해야 하는 경우 (불편한 방식)

def increment_count(count):
    count += 1
    return count

count = 0
count = increment_count(count)
count = increment_count(count)
print(f"최종 카운트 값: {count}")

- 매번 값을 전달해야 하므로 코드가 번거로움.

# 전역변수를 사용하여 개선한 경우

count = 0  # 전역 변수

def increment_count():
    global count  # 전역변수를 수정하기 위해 global 키워드 사용
    count += 1

increment_count()
increment_count()
print(f"최종 카운트 값: {count}")

✅ 전역 상태 값을 활용하면 여러 함수에서 누적 값을 유지하기 쉬워진다.

---

 예제 3: 객체나 데이터가 지속적으로 사용될 필요가 있을 때 (로그 기록)
# 전역변수 없이 매번 로그 객체를 생성하는 경우 (비효율적)

def log_message(messages, msg):
    messages.append(msg)

log_data = []
log_message(log_data, "시스템 시작")
log_message(log_data, "사용자 로그인")
print(f"로그 기록: {log_data}")

- 매번 리스트를 전달해야 하므로 코드가 복잡해짐.

# 전역변수를 사용하여 개선한 경우

log_data = []  # 전역 리스트

def log_message(msg):
    log_data.append(msg)

log_message("시스템 시작")
log_message("사용자 로그인")
print(f"로그 기록: {log_data}")

✅ 전역변수를 활용하면 여러 함수에서 동일한 객체를 쉽게 공유하고 업데이트할 수 있다.

---

■  결론
|  필요성  |  예제  |
|---|---|
| 프로그램 전체에서 공유해야 하는 값 관리 | DB 설정 값을 전역 변수로 설정 |
| 함수 간 상태를 유지해야 할 때 | 전역 카운터 사용 |
| 객체나 데이터가 지속적으로 사용될 때 | 전역 로그 기록 |

✔️ 전역변수는 설정 값, 공유 상태, 지속적인 객체 관리가 필요한 경우 적절하게 사용해야 한다.  
✔️ 하지만 전역변수의 직접 수정은 최소화하고, 필요한 경우 `global` 키워드를 신중하게 사용해야 한다.
